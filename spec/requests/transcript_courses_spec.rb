require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/transcript_courses', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # TranscriptCourse. As you add validations to TranscriptCourse, be sure to
  # adjust the attributes here as well.
  include_context 'logged in student'

  let(:major) { Major.find_or_create_by(mname: 'Computer Science', cname: 'College of Engineering') }

  let(:student) do
    Student.create(
      google_id: 123_456_789,
      first_name: 'John',
      last_name: 'Adams',
      email: 'JAdams@gmail.com',
      enrol_year: 2020,
      grad_year: 2024,
      enrol_semester: 0,
      grad_semester: 1,
      major:
    )
  end

  let(:course) do
    Course.create!(
      ccode: 'CSCE',
      cnumber: 431,
      cname: 'Software Engineering',
      description: 'Application of engineering approach to computer software design and development; life cycle models, software requirements and specification; conceptual model design; detailed design; validation and verification; design quality assurance; software design/development environments and project management.',
      credit_hours: 3,
      lecture_hours: 2,
      lab_hours: 2
    )
  end

  let(:valid_attributes) do
    {
      student_id: student.id,
      course_id: course.id,
      semester: 1,
      grade: 'A',
      year: 2020
    }
  end

  let(:transcript_course) { TranscriptCourse.create!(valid_attributes) }

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get transcript_courses_path(student_id: student.id, course_id: course.id)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get transcript_course_path(transcript_course, student_id: student.id, course_id: course.id)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_transcript_course_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      transcript_course = TranscriptCourse.create! valid_attributes
      get edit_transcript_course_url(transcript_course)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new TranscriptCourse' do
        expect do
          post transcript_courses_url, params: { transcript_course: valid_attributes }
        end.to change(TranscriptCourse, :count).by(1)
      end

      it 'redirects to the created transcript_course' do
        post transcript_courses_path, params: { transcript_course: valid_attributes }
        expect(response).to have_http_status(:redirect)
      end
    end
  end

  describe 'PATCH /update' do
    it 'updates the requested transcript_course and redirects' do
      patch transcript_course_path(transcript_course, student_id: student.id, course_id: course.id),
            params: { transcript_course: { course_id: course.id + 1 } }
      expect(response).to have_http_status(:success)
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested transcript_course' do
      transcript_course = TranscriptCourse.create! valid_attributes
      expect do
        delete transcript_course_url(transcript_course)
      end.to change(TranscriptCourse, :count).by(-1)
    end

    it 'redirects to the transcript_courses list' do
      transcript_course = TranscriptCourse.create! valid_attributes
      delete transcript_course_url(transcript_course)
      expect(response).to redirect_to(transcript_courses_url)
    end
  end
end
